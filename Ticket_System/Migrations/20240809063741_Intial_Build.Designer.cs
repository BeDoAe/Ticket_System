// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket_System.Models;

#nullable disable

namespace Ticket_System.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240809063741_Intial_Build")]
    partial class Intial_Build
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ticket_System.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a4e3a122-4f89-4711-955b-a9f85dbda5aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7a64cac-97b7-422a-b714-b6b2307dc816",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFdVLkOJPsgx7B3BX80q3hTgxKZRTEjhIFx+0NMhOa7zPMr+/7m592OlTdb8iC9MuQ==",
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcc718b4-99ae-41aa-9194-d84daceaca27",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f677c56a-75db-427c-bbfb-3b120255f238",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35d09367-4062-4eab-86d7-0a240c9d5a8a",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "First1",
                            LastName = "Last1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMaRk8063sHlAG2uujYKMjKNFtl2AckF0WyV5tpHHV+AXGtZfK7r1IfWB2fNGdVboA==",
                            PhoneNumber = "123-456-7801",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af6a9c78-5e6e-4575-bd61-4d21f4da195f",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "e4717443-b2b5-4edc-b57a-849f22ef2d37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c400ed36-bbe1-4a9b-8d83-5d92381684b0",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "First2",
                            LastName = "Last2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOOihvJ0MxtykbfE/c0ozpfepn7ChHNFm3DjLzf5d44ePggI3ln8nuDFEBa0rxh9aA==",
                            PhoneNumber = "123-456-7802",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3d56057-0b59-4699-990e-572821558674",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "35a95053-c400-4bde-be0e-005008fba2c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1996a8fa-e981-4c53-87a5-331464b5a3f7",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FirstName = "First3",
                            LastName = "Last3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECsw+PjO44ZC/JvRuDoSi11erJWBgXrMerL138dP9/IUPctDaQICc1V/hALSHpkA4g==",
                            PhoneNumber = "123-456-7803",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2319828c-e942-48b5-9540-47c517381e0d",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "d15093a4-b26f-4f72-b6da-90ffd7945ea0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3b332f5-8e4f-415b-87c4-a8224a9bbad0",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FirstName = "First4",
                            LastName = "Last4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFcUtUkeZeXVBBAmA4l0E+orWgyxBONpzeLOjKQ8n42DfjOBLfvy00JxeouLXWJl/w==",
                            PhoneNumber = "123-456-7804",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22b39f61-dc89-4398-87a6-8e1cd95be51b",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "a765c190-f42e-43e8-b6a4-4e9c718c17f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3824d260-68ee-426c-9c9c-7739ba913ca1",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            FirstName = "First5",
                            LastName = "Last5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEK2vmasVCIQq+fheoMP+wscgEjCLxFveIGTtuJW+K0U6MtvaphcYUC857iEOtc+KVw==",
                            PhoneNumber = "123-456-7805",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08beaac3-cd16-45f4-9fa0-74ca8adb4aec",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "db678632-9559-4d79-92f7-74e77f8e1e9b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7d8d53d-b371-4180-9f2a-2df6e6deba42",
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            FirstName = "First6",
                            LastName = "Last6",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEMiTqO1JbK+wfdMp3borlScG81GVG1Jvq3jtnD6/chgzzp/6eMYFONX6G94v0u2z+A==",
                            PhoneNumber = "123-456-7806",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ce2b38b-6245-4204-a441-8a21ee03f4ee",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "40426122-ad9e-417c-b3fb-5f5163f3658d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83e71d87-8846-4e0d-a28d-ea4035748b19",
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            FirstName = "First7",
                            LastName = "Last7",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHsrAsZ+tgXV1+vgy4k71ay0I2/TnByFR6II/RokCkgOhL6yNaDAhj2RC92ciVg65Q==",
                            PhoneNumber = "123-456-7807",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "590ea803-b239-499f-a9f3-49714bf4ab03",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "e67c6059-d986-43ae-9648-433d430c6ec2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79fb4b48-4fea-4dbe-a6d5-551d99a47068",
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            FirstName = "First8",
                            LastName = "Last8",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGLrBg+yh6rPKEeyvNP4UR8kQtRg9fVtOusy/a9FZ7YHCHPosvnoVzkqJgeUM1Atig==",
                            PhoneNumber = "123-456-7808",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa48b7c6-48a3-46a1-9ae9-348a2651a4cb",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "073c872b-7656-4ba0-832b-b8b335edf61b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b74dae9e-4085-4a72-b983-52cc1c85a2ed",
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            FirstName = "First9",
                            LastName = "Last9",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFlhym9e8z/j7T7GfZwS6W3iZbWdgw9HmSwunKO5dSu/aVaYSnqRwwtJpsBQfR2tYw==",
                            PhoneNumber = "123-456-7809",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69e824ce-aaeb-439f-b662-ab39be3d3899",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("Ticket_System.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticket_System.Models.Ticket", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", "User")
                        .WithOne("Ticket")
                        .HasForeignKey("Ticket_System.Models.Ticket", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket_System.Models.ApplicationUser", b =>
                {
                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
