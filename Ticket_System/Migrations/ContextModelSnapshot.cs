// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket_System.Models;

#nullable disable

namespace Ticket_System.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ticket_System.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c5c5234a-b8b1-4495-9be4-bbee52ce306e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b18becd-1b3d-4832-aa54-d41840bdb393",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBEKVCnHnZzPNZWn4LkFUFMVajVSNy4MZJlxoz4jYztBntlwT2yyNYYf1EhuiBWp6w==",
                            PhoneNumber = "123-456-7890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70664c97-19a4-468d-8ad4-c1950e85ceeb",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "6a9fb333-afec-4bf8-987b-00ed7b4398e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31d506a3-f736-4fc2-88d1-eff00080ec43",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            FirstName = "First1",
                            LastName = "Last1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEP+mfa70CQxKJQvsZSsjYR/p6dyAnKZWlzIeuOTBrm7CXvT9VPSZRMhLEQNTSxwWjw==",
                            PhoneNumber = "123-456-7801",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b1b5baa-6e09-4ae6-930e-7a59a572f2d4",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "16b999d7-bddf-43e6-807c-1689afa9667e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "929436ae-e762-40f3-a115-d07875bbbe11",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            FirstName = "First2",
                            LastName = "Last2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHGbVhi2ZVNmeMWn19OtHAb++WDzsELzJDHv88yCYjJvFjBtNFITp8zcr65Ok4HN2A==",
                            PhoneNumber = "123-456-7802",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25bf25b7-ea88-4f0b-b3d7-77579d807c9f",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "3bfa5bc0-4a8d-4648-b437-833c079032b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f380e16-7c3a-4157-aff5-1ef1f57d0701",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            FirstName = "First3",
                            LastName = "Last3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKNjsiEAVtwUFSCjKDgNRGitNfqo5Z19hVj6FSRy5i2XjUmKe5jTnYqMnwgi2jtibg==",
                            PhoneNumber = "123-456-7803",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "482d4fc7-392d-466a-b445-8dfbf9375ae7",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "3bb23328-9d39-4990-a7e4-369c543fd084",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43967235-2bc7-4118-8943-a5c518b15948",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            FirstName = "First4",
                            LastName = "Last4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFuyrNW/BEgMZTmz/P+vW30prIOnUP/OkvNJMXuqz9IE3PPK7j8ErI8b4GAy7Nv+zw==",
                            PhoneNumber = "123-456-7804",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06e2222e-122f-4390-87f5-a61dddc2fa57",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "cf82fe9f-4082-4658-8463-9e23833638e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1aa116f-6c30-4f73-8135-f81aeeca3482",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            FirstName = "First5",
                            LastName = "Last5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHwhPWw+EljmjwKpzjMvOUUX8hzA2BhCZb7NEfdkwfJMoM1iqN/0+ZUqpOFw/CZo8w==",
                            PhoneNumber = "123-456-7805",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61150c26-7a85-466a-9e6c-5666103df76a",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "7883e821-bd84-452b-bdc5-444289aba14e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8264380-b963-47c6-8de8-fa065bc4e64b",
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            FirstName = "First6",
                            LastName = "Last6",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELy5Ifsfcq+u7kecSpUguzkK1SmRbuq0eELyBDcBmKiXzKjoZIFosNdJd5YpmDMtMw==",
                            PhoneNumber = "123-456-7806",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db944d09-f877-4890-833d-9595ae98a4aa",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "4f0972eb-34b5-45e2-b559-0eb09e54a315",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd30556b-c014-4e05-a3d2-82845d0ecf1c",
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            FirstName = "First7",
                            LastName = "Last7",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHd+l2JbD3X5kaEoSDl0xgbNRD4IJ0HL0R9LPgx4ha1wW6QdTJQiHOAMiNS+7qNTgw==",
                            PhoneNumber = "123-456-7807",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b763db06-4b68-42a2-a704-ebf0c64f4500",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "54704dcc-a919-4b0d-b4a2-fcc1be07a417",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42f51bbd-8b93-459b-b22a-ff0875f21b03",
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            FirstName = "First8",
                            LastName = "Last8",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGk2cx/uPl0K9cQYf1OjCFNzeI4PXHXyKNejDzGvcRuF7B/oTUaEEeCoPSYNA1QnMg==",
                            PhoneNumber = "123-456-7808",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a3bf8a8-67ff-4d19-a733-8aeeee39a5cd",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "7f928501-869a-4002-99c3-de70087e77ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e7aecd7-9906-4a2a-944b-1e604ebb7ffe",
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            FirstName = "First9",
                            LastName = "Last9",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPCVNFzAc/JuHBfOVxN0eB1be6MhLqG6AdMhsfi1uYaJd21pKug3VhjVfGLoIB/DVA==",
                            PhoneNumber = "123-456-7809",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04607c7b-e89c-4107-81e0-6acf6e046a89",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        });
                });

            modelBuilder.Entity("Ticket_System.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticket_System.Models.Ticket", b =>
                {
                    b.HasOne("Ticket_System.Models.ApplicationUser", "User")
                        .WithOne("Ticket")
                        .HasForeignKey("Ticket_System.Models.Ticket", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket_System.Models.ApplicationUser", b =>
                {
                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
